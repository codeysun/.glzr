global:
  enable_devtools: true

###
# Define a new window with an id of 'bar'. This window can then be opened
# via the Zebar cli by running 'zebar open bar --args <ARGS...>'.
#
# Docs regarding window: https://some-future-docs-link.com
window/bar:
  providers: ["self"]
  width: "{{ self.args.MONITOR_WIDTH }}"
  height: "60" #This one is a bit funky, if you are using scaling, adjust accordingly
  position_x: "{{ self.args.MONITOR_X }}"
  position_y: "{{ self.args.MONITOR_Y }}"
  # Whether to show the window above/below all others.
  # Allowed values: 'always_on_top', 'always_on_bottom', 'normal'.
  z_order: "always_on_bottom"
  # Whether the window should be shown in the taskbar.
  show_in_taskbar: false
  # Whether the window should have resize handles.
  resizable: false
  # Styles to apply globally within the window. For example, we can use
  # this to import the Nerdfonts icon font. Ref https://www.nerdfonts.com/cheat-sheet
  # for a cheatsheet of available Nerdfonts icons.
  global_styles: |
    @import "https://www.nerdfonts.com/assets/css/webfont.css";
    @import "https://cdn.jsdelivr.net/npm/@tabler/icons-webfont@latest/dist/tabler-icons.min.css";

    :root {
      --rp-base: #191724;
      --rp-base-alpha-bg: #191724dd;
      --rp-surface: #1f1d2e;
      --rp-overlay: #26233a;
      --rp-muted: #6e6a86;
      --rp-subtle: #908caa;
      --rp-text: #e0def4;
      --rp-love: #eb6f92;
      --rp-gold: #f6c177;
      --rp-rose: #ebbcba;
      --rp-pine: #31748f;
      --rp-foam: #9ccfd8;
      --rp-iris: #c4a7e7;
      --rp-highlight-low: #21202e;
      --rp-highlight-med: #403d52;
      --rp-highlight-high: #524f67;

      --rp-moon-base: #232136;
      --rp-moon-base-alpha-bg: #232136dd;
      --rp-moon-surface: #2a273f;
      --rp-moon-overlay: #393552;
      --rp-moon-muted: #6e6a86;
      --rp-moon-subtle: #908caa;
      --rp-moon-text: #e0def4;
      --rp-moon-love: #eb6f92;
      --rp-moon-gold: #f6c177;
      --rp-moon-rose: #ea9a97;
      --rp-moon-pine: #3e8fb0;
      --rp-moon-foam: #9ccfd8;
      --rp-moon-iris: #c4a7e7;
      --rp-moon-highlight-low: #2a283e;
      --rp-moon-highlight-med: #44415a;
      --rp-moon-highlight-high: #56526e;

      --rp-dawn-base: #faf4ed;
      --rp-dawn-base-alpha-bg: #faf4eddd
      --rp-dawn-surface: #fffaf3;
      --rp-dawn-overlay: #f2e9e1;
      --rp-dawn-muted: #9893a5;
      --rp-dawn-subtle: #797593;
      --rp-dawn-text: #575279;
      --rp-dawn-love: #b4637a;
      --rp-dawn-gold: #ea9d34;
      --rp-dawn-rose: #d7827e;
      --rp-dawn-pine: #286983;
      --rp-dawn-foam: #56949f;
      --rp-dawn-iris: #907aa9;
      --rp-dawn-highlight-low: #f4ede8;
      --rp-dawn-highlight-med: #dfdad9;
      --rp-dawn-highlight-high: #cecacd;

      --text: var(--rp-text);
      --bg: var(--rp-base-alpha-bg);
      --border: var(--rp-base);
      --icon: var(--rp-love);
      --memory: var(--rp-iris);
      --cpu: var(--rp-rose);
      --cpu-high-usage: var(--rp-love);
      --battery-good: var(--rp-foam);
      --battery-mid: var(--rp-gold);
      --battery-low: var(--rp-love);
      --focused-process: var(--rp-foam);
      --ws-1: var(--rp-love);
      --ws-2: var(--rp-gold);
      --ws-3: var(--rp-rose);
      --ws-4: var(--rp-pine);
      --ws-5: var(--rp-foam);
      --ws-6: var(--rp-iris);
      --spotify: var(--rp-love);
      --glazewm-other: var(--rp-pine);
      --weather: var(--rp-gold);
      --clock: var(--rp-text);
    }

    @keyframes flash {
        from { opacity: 1.0; }
        50% { opacity: 0.5; }
        to { opacity: 1.0; }
    }
    @keyframes click {
      from { font-size: 14px; }
      50% { font-size: 16px; }
      to { font-size: 14px; }
    }
    @keyframes rot-vert {to { -webkit-transform: rotate(90deg); transform:rotate(90deg); }}
    @keyframes rot-hor {
      from { -webkit-transform: rotate(90deg); transform:rotate(90deg); }
      to { -webkit-transform: rotate(0deg); transform:rotate(0deg); }
    }

  # CSS styles to apply to the root element within the window. Using CSS
  # nesting, we can also target nested elements (e.g. below we set the
  # color and margin-right of icons).
  styles: |
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    align-items: center;
    height: 40px;
    margin: 10px 20px;
    color: var(--text);
    font-family: "FiraCode Nerd Font", ui-monospace, monospace;
    font-size: 14px;
    font-weight: 400;

  group/left:
    styles: |
      display: flex;
      align-items: center;
      justify-content: space-between;
      background: var(--bg);
      border: 1px solid var(--border);
      border-radius: 9999px;
      height: 40px;
      width: fit-content;

      .template {
        margin: 4px;
        display: flex;
        align-items: center;

        div {
          display: flex;
          align-items: center;
        }
      }

      #memory, #cpu, #gpu, #focused-process {
        background: color-mix(in srgb, currentColor 10%, transparent);
        border-radius: 9999px;
        padding: 6px;
        i {
          font-size: 20px;
          margin-right: 7px;
        }
      }

    template/rose-pine:
      styles: |
        color: var(--icon);
        background: color-mix(in srgb, currentColor 10%, transparent);
        padding: 6px;
        border-radius: 9999px
      template: |
        <i class="nf nf-md-flower_tulip"></i>

    template/memory:
      providers: ["memory"]
      styles: |
        color: var(--memory);
      template: |
        <i class="nf nf-fae-chip"></i>
        {{ (memory.usedMemory / 1000000000).toFixed(2) }} GiB

    template/cpu:
      providers: ["cpu"]
      styles: |
        color: var(--cpu);

        .high-usage {
          color: var(--cpu-high-usage);
          animation: flash 0.5s infinite;
        }
      template: |
        <div class={{cpu.usage > 85 ? "high-usage" : ""}}>
          <i class="ti ti-cpu"></i>
          <span>{{ Math.round(cpu.usage) }}%</span>
        </div>

    template/battery:
      providers: ["battery"]
      styles: |
        .critical {
          color: var(--battery-low);
          animation: flash 1s infinite;
        }

        .low {
          color: var(--battery-low)
        }

        .mid {
          color: var(--battery-mid)
        }

        .good {
          color: var(--battery-good);
        }
      template: |
        <div class="
            @switch (true) {
              @case (battery.chargePercent > 75) { good }
              @case (battery.chargePercent > 50) { mid }
              @case (battery.chargePercent > 25) { low }
              @default { critical }
            }
          ">
            <i class="ti ti-bolt"></i>
            {{ Math.round(battery.chargePercent) }}%
        </div>

    template/focused-process:
      providers: ["glazewm"]
      styles: |

        color: var(--focused-process)
      template: |

        @for (child of glazewm.focusedWorkspace.children) {
          @if (child?.hasFocus) {
            <i class="ti ti-focus-2"></i>
            {{ child.processName }}
          }
        }


  group/center:
    styles: |
      justify-self: center;

    # if displayed and hovered, increase font size
    # if focused and hovered, decrease font size
    template/glazewm:
      styles: |
        height: 40px;
        display: flex;
        align-items: center;
        background: var(--bg);
        border: 1px solid var(--border);
        border-radius: 9999px;
        font-weight: 1000;

        .workspace {
          background:transparent;
          border: none;
          display: flex;
          align-items: center;
          justify-content: center;
          padding: 4px;
          cursor: pointer;


          transition: font-size 0.1s ease;
          transition-behavior: allow-discrete;

          &.focused {
            animation: click 0.15s ease;
          }
          &:hover {
            font-size: 20px;
          }
        }

        i {
          padding: 8px;
          background: color-mix(in srgb, currentColor 10%, transparent);
          border-radius: 9999px;
        }

        button:nth-child(6n+1) i {
          color: var(--ws-1);
          pointer-events:none;
        }

        button:nth-child(6n+2) i {
          color: var(--ws-2);
          pointer-events:none;
        }

        button:nth-child(6n+3) i {
          color: var(--ws-3);
          pointer-events:none;
        }

        button:nth-child(6n+4) i {
          color: var(--ws-4);
          pointer-events:none;
        }

        button:nth-child(6n+5) i {
          color: var(--ws-5);
          pointer-events:none;
        }

        button:nth-child(6n+6) i {
          color: var(--ws-6);
          pointer-events:none;
        }

      providers: ["glazewm"]
      events:
        - type: "click"
          fn_path: "script.js#focusWorkspace"
          selector: ".workspace"
      template: |
        @for (workspace of glazewm.currentWorkspaces) {
          <button
            class="workspace {{ workspace.hasFocus ? 'focused' : '' }} {{ workspace.isDisplayed ? 'displayed' : '' }}"
            id="{{ workspace.name }}"
          >
            <i class="nf {{ workspace.hasFocus? 'nf-cod-circle_filled' : 'nf-cod-circle' }}"></i>
          </button>
        }

  group/right:
    styles: |
      justify-self: end;
      height: 40px;
      display: flex;
      align-items: center;
      background: var(--bg);
      border: 1px solid var(--border);
      border-radius: 9999px;

      .template {
        margin: 4px;
        display: flex;
        align-items: center;
      }

      #spotify, #glazewm-other, #weather, #clock {
        background: color-mix(in srgb, currentColor 10%, transparent);
        border-radius: 9999px;
        padding: 6px;
        i {
          font-size: 20px;
          margin-right: 7px;
        }
      }

    template/spotify:
      providers: ["glazewm"]
      styles: |
        color: var(--spotify)
      template: |
          @for (workspace of glazewm.allWorkspaces) {
            @for (child of workspace.children) {
              @if (child?.processName === "Spotify") {
                <i class="ti ti-brand-spotify"></i>
                {{ child.title }}
              }
            }
          }

    template/glazewm-other:
      providers: ["glazewm"]
      styles: |
        display: flex;
        gap: 5px;
        color: var(--glazewm-other);

        .binding-mode,
        .tiling-direction {
          padding: 4px 6px;
          margin: 0;
        }

        .binding-mode {
          display: flex;
          align-items: center;
          line-height: 1;
        }
        .tiling-direction {
          cursor: pointer;
          color: var(--glazewm-other);
          background:transparent;
          border: none;
          span {
            display: inline-block;
            animation: rot-hor 0.2s cubic-bezier(0.460, -0.295, 0.140, 1.80);
            animation-fill-mode: forwards;
          }
          &[data-direction="vertical"] span {
            animation: rot-vert 0.2s cubic-bezier(0.460, -0.295, 0.140, 1.80);
            animation-fill-mode: forwards;
          }
        }
      events:
        - type: 'click'
          fn_path: 'script.js#toggleTilingDirection'
          selector: '.tiling-direction'
      template: |
        @for (bindingMode of glazewm.bindingModes) {
          <span class="binding-mode">
            {{ bindingMode.displayName ?? bindingMode.name }}
          </span>
        }
        <button class="tiling-direction" data-direction="{{ glazewm.tilingDirection === 'horizontal' ? 'horizontal' : 'vertical' }}">
          <span class="nf nf-md-swap_horizontal"></span>
        </button>

    template/weather:
      providers: ["weather"]
      styles: |
        margin: 10px;
        color: var(--weather);
      template: |
        @switch (weather.status) {
          @case ('clear_day') {<i class="nf nf-weather-day_sunny"></i>}
          @case ('clear_night') {<i class="nf nf-weather-night_clear"></i>}
          @case ('cloudy_day') {<i class="nf nf-weather-day_cloudy"></i>}
          @case ('cloudy_night') {<i class="nf nf-weather-night_alt_cloudy"></i>}
          @case ('light_rain_day') {<i class="nf nf-weather-day_sprinkle"></i>}
          @case ('light_rain_night') {<i class="nf nf-weather-night_alt_sprinkle"></i>}
          @case ('heavy_rain_day') {<i class="nf nf-weather-day_rain"></i>}
          @case ('heavy_rain_night') {<i class="nf nf-weather-night_alt_rain"></i>}
          @case ('snow_day') {<i class="nf nf-weather-day_snow"></i>}
          @case ('snow_night') {<i class="nf nf-weather-night_alt_snow"></i>}
          @case ('thunder_day') {<i class="nf nf-weather-day_lightning"></i>}
          @case ('thunder_night') {<i class="nf nf-weather-night_alt_lightning"></i>}
        }
        {{ weather.celsiusTemp }}°

    # template/separator:
    #   styles: |
    #   template: |
    #     <i class="nf nf-oct-dot_fill"></>

    template/clock:
      providers: ["date"]
      styles: |
        padding-right: 6px;
        margin: 10px;
        color: var(--clock);
      template: |
        <i class="nf nf-fa-clock"></i>
        {{ date.toFormat(date.now, 't') }}
